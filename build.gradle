plugins {
    id 'java-library'
    id "maven-publish"
    id "org.openmicroscopy.dsl" version "5.5.0-SNAPSHOT"
}

repositories {
    mavenCentral()
    maven {
        url 'http://artifacts.openmicroscopy.org/artifactory/maven/'
    }
}

group = 'org.openmicroscopy'
version = '5.5.0-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

configurations {
    provided
    api.extendsFrom provided
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.testng', name: 'testng', version: '6.14.2'

    // Needs updating to later versions
    provided 'org.springframework:spring-orm:4.3.14.RELEASE'
    provided 'org.springframework:spring-context:4.3.14.RELEASE'
    provided 'org.hibernate:hibernate-core:3.6.10.Final'
    provided 'org.hibernate:hibernate-search:3.4.2.Final'

    // Our libraries
    api 'org.openmicroscopy:ome-xml:5.6.2'
    api 'ome:formats-bsd:5.9.2'
    api 'ome:formats-gpl:5.9.2'
}

test {
    // enable TestNG support (default is JUnit)
    useTestNG() {
        suites "src/test/resources/unit.testng.xml"
    }
}

sourceSets {
    main {
        java {
            srcDirs 'src/generated/java'
        }
        resources {
            srcDirs 'src/generated/resources'
        }
    }
}


dsl {
    templateFiles fileTree(
            dir: "src/main/resources/templates",
            include: '**/*.vm'
    )
    outputPath "src/generated"

    code {
        java {
            template "object.vm"
            outputPath "java"
            formatOutput { st ->
                "${st.getPackage()}/${st.getShortname()}.java"
            }
        }
    }

    resource {
        hibernate {
            template "cfg.vm"
            outputFile "resources/hibernate.cfg.xml"
        }

        sql {
            template "views.vm"
            outputFile "resources/views.sql"
        }

        enums {
            template "enums.vm"
            outputFile "resources/enums.properties"
        }
    }
}

/**
 * Function to collect runtime components excluding what we've marked as
 * {@code dependencies{ provided 'xx' }}
 * @return unzipped "compile" dependencies
 */
def collectOmeroJars() {
    // Remove provided jars from runtimeClasspath configuration
    def diff = configurations.runtimeClasspath - configurations.provided
    return diff.collect { it.isDirectory() ? it : zipTree(it) }
}

task customJar(type: Jar) {
    from sourceSets.main.output // Include self compiled
    from collectOmeroJars()
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allSource
}

publishing {
    publications {
        modelJar(MavenPublication) {
            artifact customJar
            artifact sourceJar

            // Edit pom to mark "provided" as dependencies
            pom.withXml { xml ->
                def dependenciesNode = xml.asNode().appendNode('dependencies')

                configurations.provided.allDependencies.each {
                    if (!(it instanceof SelfResolvingDependency)) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'compile')
                    }
                }
            }
        }
    }
}
